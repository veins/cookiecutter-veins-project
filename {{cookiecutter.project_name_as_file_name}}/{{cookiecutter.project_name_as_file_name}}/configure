#!/usr/bin/env python3

#
# Copyright (C) 2013-2019 Christoph Sommer <sommer@ccs-labs.org>
#
# Documentation for these modules is at http://veins.car2x.org/
#
# SPDX-License-Identifier: GPL-2.0-or-later
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
#

"""
Creates Makefile(s) for building this project.
"""

import os
import sys
import subprocess
import logging
from logging import info, warning, error
from optparse import OptionParser

# check python version
if sys.version_info[0] < 3:
    warning("Warning: running configure with Python 2 might result in subtle errors.")

# pretty-print version
def version_to_hr(v):
    s = '"%s"' % v.decode(errors='replace')
    return(s)

# pretty-print list of versions
def versions_to_hr(vv):
    s = ' or '.join([version_to_hr(v) for v in vv])
    return(s)

# Option handling
parser = OptionParser()
parser.add_option("-v", "--verbose", dest="count_verbose", default=0, action="count", help="increase verbosity [default: don't log infos, debug]")
parser.add_option("-q", "--quiet", dest="count_quiet", default=0, action="count", help="decrease verbosity [default: log warnings, errors]")
parser.add_option("--with-veins", dest="veins", help="link with a version of Veins installed in PATH", metavar="PATH", default="../veins")
{%- if cookiecutter.use_veins_vlc == "yes" %}
parser.add_option("--with-veins-vlc", dest="veins_vlc", help="link with a version of Veins VLC installed in PATH", metavar="PATH", default="../veins_vlc")
{%- endif %}
{%- if cookiecutter.use_plexe_veins == "yes" %}
parser.add_option("--with-plexe-veins", dest="plexe_veins", help="link with a version of Plexe Veins installed in PATH", metavar="PATH", default="../plexe_veins")
{%- endif %}
{%- if cookiecutter.use_simulte == "yes" %}
parser.add_option("--with-simulte", dest="simulte", help="link with a version of SimuLTE installed in PATH", metavar="PATH", default="../simulte")
{%- endif %}
{%- if cookiecutter.use_simu5g == "yes" %}
parser.add_option("--with-simu5g", dest="simu5g", help="link with a version of SimuLTE installed in PATH", metavar="PATH", default="../simu5g")
{%- endif %}
{%- if cookiecutter.use_inet == "yes" %}
parser.add_option("--with-inet", dest="inet", help="link with a version of the INET Framework installed in PATH", metavar="PATH", default="../inet")
parser.add_option("--with-veins-inet", dest="veins_inet", help="link with a version of Veins_INET installed in PATH", metavar="PATH", default="../veins/subprojects/veins_inet")
{%- endif %}
{%- if cookiecutter.use_inet3 == "yes" %}
parser.add_option("--with-inet3", dest="inet3", help="link with a version of the INET Framework installed in PATH", metavar="PATH", default="../inet")
parser.add_option("--with-veins-inet3", dest="veins_inet3", help="link with a version of Veins_INET installed in PATH", metavar="PATH", default="../veins/subprojects/veins_inet3")
{%- endif %}
(options, args) = parser.parse_args()

_LOGLEVELS = (logging.ERROR, logging.WARN, logging.INFO, logging.DEBUG)
loglevel = _LOGLEVELS[max(0, min(1 + options.count_verbose - options.count_quiet, len(_LOGLEVELS)-1))]
logging.basicConfig(level=loglevel)

if args:
    warning("Superfluous command line arguments: \"%s\"" % " ".join(args))


# Start with default flags
makemake_flags = ['-f', '--deep', '--no-deep-includes', '--make-so', '-I', '.', '-o', '{{ cookiecutter.project_name_as_file_name }}', '-O', 'out']
run_libs = [os.path.join('src', '{{ cookiecutter.project_name_as_file_name }}')]
run_neds = [os.path.join('src', '{{ cookiecutter.project_name_as_file_name }}')]
run_imgs = [os.path.join('images')]


# Add flags for Veins
if options.veins:
    fname = os.path.join(options.veins, 'print-veins-version')
    expect_version = [b'5.1']
    try:
        info('Running "%s" to determine Veins version.' % fname)
        version = subprocess.check_output(['env', fname]).strip()
        if not version in expect_version:
            warning('')
            warning('!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!')
            warning('Unsupported Veins Version. Expecting %s, found %s' % (versions_to_hr(expect_version), version_to_hr(version)))
            warning('!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!')
            warning('')
        else:
            info('Found Veins version %s. Okay.' % version_to_hr(version))
    except subprocess.CalledProcessError as e:
        error('Could not determine Veins Version (by running %s): %s. Check the path to Veins (--with-veins=... option) and the Veins version (should be version %s)' % (fname, e, versions_to_hr(expect_version)))
        sys.exit(1)

    veins_header_dirs = [os.path.join(os.path.relpath(options.veins, 'src'), 'src')]
    veins_includes = ['-I' + s for s in veins_header_dirs]
    veins_link = ["-L" + os.path.join(os.path.relpath(options.veins, 'src'), 'src'), "-lveins$(D)"]
    veins_defs = []

    makemake_flags += veins_includes + veins_link + veins_defs
    run_libs = [os.path.relpath(os.path.join(options.veins, 'src', 'veins'))] + run_libs
    run_neds = [os.path.relpath(os.path.join(options.veins, 'src', 'veins'))] + run_neds
    run_imgs = [os.path.relpath(os.path.join(options.veins, 'images'))] + run_imgs
{%- if cookiecutter.use_inet == "yes" %}


# Add flags for INET
if options.inet:
    fname = os.path.join(options.inet, '_scripts/get_version')
    expect_version = [b'4.2.0', b'4.2.1']
    try:
        info('Running "%s" to determine INET version.' % fname)
        version = subprocess.check_output(['env', fname]).strip()
        if not version in expect_version:
            warning('')
            warning('!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!')
            warning('Unsupported INET Version. Expecting %s, found %s' % (versions_to_hr(expect_version), version_to_hr(version)))
            warning('!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!')
            warning('')
        else:
            info('Found INET version %s. Okay.' % version_to_hr(version))
    except subprocess.CalledProcessError as e:
        error('Could not determine INET Version (by running %s): %s. Check the path to INET (--with-inet=... option) and the INET version (should be version %s)' % (fname, e, versions_to_hr(expect_version)))
        sys.exit(1)

    inet_header_dirs = [os.path.join(os.path.relpath(options.inet, 'src'), 'src')]
    inet_includes = ['-I' + s for s in inet_header_dirs]
    inet_link = ["-L" + os.path.join(os.path.relpath(options.inet, 'src'), 'src'), "-lINET$(D)"]
    inet_defs = ["-DINET_IMPORT"]

    makemake_flags += inet_includes + inet_link + inet_defs
    run_libs = [os.path.relpath(os.path.join(options.inet, 'src', 'INET'))] + run_libs
    run_neds = [os.path.relpath(os.path.join(options.inet, 'src'))] + run_neds
    run_imgs = [os.path.relpath(os.path.join(options.inet, 'images'))] + run_imgs


# Add flags for Veins_INET
if options.veins_inet:
    fname = os.path.join(options.veins_inet, 'print-veins_inet-version')
    expect_version = [b'4.0']
    try:
        info('Running "%s" to determine Veins_INET version.' % fname)
        version = subprocess.check_output(['env', fname]).strip()
        if not version in expect_version:
            warning('')
            warning('!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!')
            warning('Unsupported Veins_INET Version. Expecting %s, found %s' % (versions_to_hr(expect_version), version_to_hr(version)))
            warning('!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!')
            warning('')
        else:
            info('Found Veins_INET version %s. Okay.' % version_to_hr(version))
    except OSError as e:
        error('Could not determine Veins_INET Version (by running %s): %s. Check the path to Veins_INET (--with-veins=... option) and the Veins_INET version (should be version %s)' % (fname, e, versions_to_hr(expect_version)))
        sys.exit(1)

    veins_inet_header_dirs = [os.path.join(os.path.relpath(options.veins_inet, 'src'), 'src')]
    veins_inet_includes = ['-I' + s for s in veins_inet_header_dirs]
    veins_inet_link = ["-L" + os.path.join(os.path.relpath(options.veins_inet, 'src'), 'src'), "-lveins_inet$(D)"]
    veins_inet_defs = []

    makemake_flags += veins_inet_includes + veins_inet_link + veins_inet_defs
    run_libs = [os.path.relpath(os.path.join(options.veins_inet, 'src', 'veins_inet'))] + run_libs
    run_neds = [os.path.relpath(os.path.join(options.veins_inet, 'src', 'veins_inet'))] + run_neds
    run_imgs = [os.path.relpath(os.path.join(options.veins_inet, 'images'))] + run_imgs
{%- endif %}
{%- if cookiecutter.use_inet3 == "yes" %}


# Add flags for INET (version 3)
if options.inet3:
    fname = os.path.join(options.inet3, '_scripts/get_version')
    expect_version = [b'3.6.5', b'3.6.6', b'3.6.7', b'3.6.8']
    try:
        info('Running "%s" to determine INET version.' % fname)
        version = subprocess.check_output(['env', fname]).strip()
        if not version in expect_version:
            warning('')
            warning('!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!')
            warning('Unsupported INET Version. Expecting %s, found %s' % (versions_to_hr(expect_version), version_to_hr(version)))
            warning('!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!')
            warning('')
        else:
            info('Found INET version %s. Okay.' % version_to_hr(version))
    except subprocess.CalledProcessError as e:
        error('Could not determine INET Version (by running %s): %s. Check the path to INET (--with-inet3=... option) and the INET version (should be version %s)' % (fname, e, versions_to_hr(expect_version)))
        sys.exit(1)

    inet3_header_dirs = [os.path.join(os.path.relpath(options.inet3, 'src'), 'src')]
    inet3_includes = ['-I' + s for s in inet3_header_dirs]
    inet3_link = ["-L" + os.path.join(os.path.relpath(options.inet3, 'src'), 'src'), "-lINET$(D)"]
    inet3_defs = ["-DINET_IMPORT"]

    makemake_flags += inet3_includes + inet3_link + inet3_defs
    run_libs = [os.path.relpath(os.path.join(options.inet3, 'src', 'INET'))] + run_libs
    run_neds = [os.path.relpath(os.path.join(options.inet3, 'src'))] + run_neds
    run_imgs = [os.path.relpath(os.path.join(options.inet3, 'images'))] + run_imgs


# Add flags for Veins_INET
if options.veins_inet3:
    fname = os.path.join(options.veins_inet3, 'print-veins_inet-version')
    expect_version = [b'3.0']
    try:
        info('Running "%s" to determine Veins_INET version.' % fname)
        version = subprocess.check_output(['env', fname]).strip()
        if not version in expect_version:
            warning('')
            warning('!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!')
            warning('Unsupported Veins_INET Version. Expecting %s, found %s' % (versions_to_hr(expect_version), version_to_hr(version)))
            warning('!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!')
            warning('')
        else:
            info('Found Veins_INET version %s. Okay.' % version_to_hr(version))
    except OSError as e:
        error('Could not determine Veins_INET Version (by running %s): %s. Check the path to Veins_INET (--with-veins=... option) and the Veins_INET version (should be version %s)' % (fname, e, versions_to_hr(expect_version)))
        sys.exit(1)

    veins_inet3_header_dirs = [os.path.join(os.path.relpath(options.veins_inet3, 'src'), 'src')]
    veins_inet3_includes = ['-I' + s for s in veins_inet3_header_dirs]
    veins_inet3_link = ["-L" + os.path.join(os.path.relpath(options.veins_inet3, 'src'), 'src'), "-lveins_inet$(D)"]
    veins_inet3_defs = []

    makemake_flags += veins_inet3_includes + veins_inet3_link + veins_inet3_defs
    run_libs = [os.path.relpath(os.path.join(options.veins_inet3, 'src', 'veins_inet'))] + run_libs
    run_neds = [os.path.relpath(os.path.join(options.veins_inet3, 'src', 'veins_inet'))] + run_neds
    run_imgs = [os.path.relpath(os.path.join(options.veins_inet3, 'images'))] + run_imgs
{%- endif %}
{%- if cookiecutter.use_veins_vlc == "yes" %}


# Add flags for Veins VLC
if options.veins_vlc:
    fname = os.path.join(options.veins_vlc, 'print-veins_vlc-version')
    expect_version = [b'1.0']
    try:
        info('Running "%s" to determine Veins VLC version.' % fname)
        version = subprocess.check_output(['env', fname]).strip()
        if not version in expect_version:
            warning('')
            warning('!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!')
            warning('Unsupported Veins VLC Version. Expecting %s, found %s' % (versions_to_hr(expect_version), version_to_hr(version)))
            warning('!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!')
            warning('')
        else:
            info('Found Veins VLC version %s. Okay.' % version_to_hr(version))
    except subprocess.CalledProcessError as e:
        error('Could not determine Veins VLC Version (by running %s): %s. Check the path to Veins VLC (--with-veins-vlc=... option) and the Veins VLC version (should be version %s)' % (fname, e, versions_to_hr(expect_version)))
        sys.exit(1)

    veins_vlc_header_dirs = [os.path.join(os.path.relpath(options.veins_vlc, 'src'), 'src')]
    veins_vlc_includes = ['-I' + s for s in veins_vlc_header_dirs]
    veins_vlc_link = ["-L" + os.path.join(os.path.relpath(options.veins_vlc, 'src'), 'src'), "-lveins-vlc$(D)"]
    veins_vlc_defs = []

    makemake_flags += veins_vlc_includes + veins_vlc_link + veins_vlc_defs
    run_libs = [os.path.relpath(os.path.join(options.veins_vlc, 'src', 'veins-vlc'))] + run_libs
    run_neds = [os.path.relpath(os.path.join(options.veins_vlc, 'src', 'veins-vlc'))] + run_neds
    run_imgs = [os.path.relpath(os.path.join(options.veins_vlc, 'images'))] + run_imgs
{%- endif %}
{%- if cookiecutter.use_plexe_veins == "yes" %}


# Add flags for Plexe Veins
if options.plexe_veins:
    fname = os.path.join(options.plexe_veins, 'src', 'plexe', 'plexe.h')
    expect_version = [b'3.0-alpha1']
    try:
        info('Running "%s" to determine Plexe Veins version.' % fname)
        version = subprocess.check_output(['env', 'cat', fname]).strip()
        if not version:
            warning('')
            warning('!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!')
            warning('Unsupported Plexe Veins Version. Expecting %s, found %s' % (versions_to_hr(expect_version), version_to_hr(version)))
            warning('!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!')
            warning('')
        else:
            info('Found Plexe Veins version %s. Okay.' % version_to_hr(version))
    except subprocess.CalledProcessError as e:
        error('Could not determine Plexe Veins Version (by running %s): %s. Check the path to Plexe Veins (--with-plexe-veins=... option) and the Plexe Veins version (should be version %s)' % (fname, e, versions_to_hr(expect_version)))
        sys.exit(1)

    plexe_veins_header_dirs = [os.path.join(os.path.relpath(options.plexe_veins, 'src'), 'src')]
    plexe_veins_includes = ['-I' + s for s in plexe_veins_header_dirs]
    plexe_veins_link = ["-L" + os.path.join(os.path.relpath(options.plexe_veins, 'src'), 'src'), "-lplexe$(D)"]
    plexe_veins_defs = []

    makemake_flags += plexe_veins_includes + plexe_veins_link + plexe_veins_defs
    run_libs = [os.path.relpath(os.path.join(options.plexe_veins, 'src', 'plexe'))] + run_libs
    run_neds = [os.path.relpath(os.path.join(options.plexe_veins, 'src', 'plexe'))] + run_neds
    run_imgs = [os.path.relpath(os.path.join(options.plexe_veins, 'images'))] + run_imgs
{%- endif %}
{%- if cookiecutter.use_simulte == "yes" %}


# Add flags for SimuLTE
if options.simulte:
    fname = os.path.join(options.simulte, 'Version')
    expect_version = [b'v1.1.0']
    try:
        info('Running "%s" to determine SimuLTE version.' % fname)
        version = subprocess.check_output(['env', 'cat', fname]).strip()
        if not version in expect_version:
            warning('')
            warning('!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!')
            warning('Unsupported SimuLTE Version. Expecting %s, found %s' % (versions_to_hr(expect_version), version_to_hr(version)))
            warning('!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!')
            warning('')
        else:
            info('Found SimuLTE version %s. Okay.' % version_to_hr(version))
    except subprocess.CalledProcessError as e:
        error('Could not determine SimuLTE Version (by running %s): %s. Check the path to SimuLTE (--with-simulte=... option) and the SimuLTE version (should be version %s)' % (fname, e, versions_to_hr(expect_version)))
        sys.exit(1)

    simulte_header_dirs = [os.path.join(os.path.relpath(options.simulte, 'src'), 'src')]
    simulte_includes = ['-I' + s for s in simulte_header_dirs]
    simulte_link = ["-L" + os.path.join(os.path.relpath(options.simulte, 'src'), 'src'), "-llte$(D)"]
    simulte_defs = []

    makemake_flags += simulte_includes + simulte_link + simulte_defs
    run_libs = [os.path.relpath(os.path.join(options.simulte, 'src', 'lte'))] + run_libs
    run_neds = [os.path.relpath(os.path.join(options.simulte, 'src'))] + run_neds
    run_imgs = [os.path.relpath(os.path.join(options.simulte, 'images'))] + run_imgs
{%- endif %}
{%- if cookiecutter.use_simu5g == "yes" %}

# Add flags for Simu5G
if options.simu5g:
    fname = os.path.join(options.simu5g, 'Version')

    simu5g_header_dirs = [os.path.join(os.path.relpath(options.simu5g, 'src'), 'src')]
    simu5g_includes = ['-I' + s for s in simu5g_header_dirs]
    simu5g_link = ["-L" + os.path.join(os.path.relpath(options.simu5g, 'src'), 'src'), "-lsimu5g$(D)"]
    simu5g_defs = []

    makemake_flags += simu5g_includes + simu5g_link + simu5g_defs
    run_libs = [os.path.relpath(os.path.join(options.simu5g, 'src', 'simu5G'))] + run_libs
    run_neds = [os.path.relpath(os.path.join(options.simu5g, 'src'))] + run_neds
    run_imgs = [os.path.relpath(os.path.join(options.simu5g, 'images'))] + run_imgs
{%- endif %}


# Start creating files
if not os.path.isdir('out'):
    os.mkdir('out')

f = open(os.path.join('out', 'config.py'), 'w')
f.write('run_libs = %s\n' % repr(run_libs))
f.write('run_neds = %s\n' % repr(run_neds))
f.write('run_imgs = %s\n' % repr(run_imgs))
f.close()

subprocess.check_call(['env', 'opp_makemake'] + makemake_flags, cwd='src')

info('Configure done. You can now run "make".')
